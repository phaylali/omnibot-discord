import discord
from discord import app_commands
from typing import Optional
import logging
import datetime

logging.basicConfig(
    filename='twitch_commands.log',
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

@app_commands.command(
    name="twitch",
    description="Manage Twitch channel monitoring"
)
@app_commands.choices(action=[
    app_commands.Choice(name="add", value="add"),
    app_commands.Choice(name="remove", value="remove"),
    app_commands.Choice(name="list", value="list")
])
async def twitch(
    interaction: discord.Interaction,
    action: str,
    channel_name: Optional[str] = None
):
    logging.info(f"Command executed by {interaction.user.name}#{interaction.user.discriminator} (ID: {interaction.user.id})")
    logging.info(f"Action: {action}, Channel: {channel_name}")

    # Role check
    streamer_role = discord.utils.get(interaction.guild.roles, name="Streamer")
    if streamer_role not in interaction.user.roles:
        logging.warning(f"Access denied: User lacks Streamer role")
        await interaction.response.send_message(
            "You need the 'Streamer' role to use this command!",
            ephemeral=True
        )
        return

    # Channel check
    if interaction.channel.name != "streamer_submission":
        logging.warning(f"Wrong channel: Command used in #{interaction.channel.name}")
        await interaction.response.send_message(
            "This command can only be used in the #streamer_submission channel!",
            ephemeral=True
        )
        return

    # Get live_now channel
    live_now_channel = discord.utils.get(interaction.guild.channels, name="live_now")
    if not live_now_channel:
        logging.error("live_now channel not found")
        await interaction.response.send_message(
            "The #live_now channel doesn't exist! Please create it first.",
            ephemeral=True
        )
        return

    # LIST command - no channel_name needed
    if action == "list":
        channels = list(interaction.client.twitch_monitor.monitored_channels.keys())
        if channels:
            logging.info(f"Listed channels: {', '.join(channels)}")
            await interaction.response.send_message(
                f"üì∫ Monitored channels that will notify in {live_now_channel.mention}:\n" +
                "\n".join([f"‚Ä¢ {channel}" for channel in channels]),
                ephemeral=True
            )
        else:
            logging.info("Listed channels: None found")
            await interaction.response.send_message(
                "üìù No channels are currently being monitored.",
                ephemeral=True
            )
        return

    # Require channel_name for add/remove
    if not channel_name and action in ["add", "remove"]:
        await interaction.response.send_message(
            "Please provide a channel name!",
            ephemeral=True
        )
        return

    # ADD command
    if action == "add":
        try:
            headers = {
                'Client-ID': interaction.client.twitch_monitor.client_id,
                'Authorization': f'Bearer {interaction.client.twitch_monitor.access_token}'
            }
            
            await interaction.client.twitch_monitor.monitor_channel(
                channel_name,
                live_now_channel.id
            )
            logging.info(f"Successfully added Twitch channel: {channel_name}")
            await interaction.response.send_message(
                f"‚úÖ Now monitoring Twitch channel: {channel_name}\nLive notifications will be sent to {live_now_channel.mention}",
                ephemeral=True
            )
        except Exception as e:
            logging.error(f"Error adding channel {channel_name}: {str(e)}")
            await interaction.response.send_message(
                f"‚ùå Error adding the channel. Please try again later.",
                ephemeral=True
            )

    # REMOVE command
    elif action == "remove":
        if channel_name in interaction.client.twitch_monitor.monitored_channels:
            del interaction.client.twitch_monitor.monitored_channels[channel_name]
            logging.info(f"Successfully removed Twitch channel: {channel_name}")
            await interaction.response.send_message(
                f"‚úÖ Successfully removed channel: {channel_name}",
                ephemeral=True
            )
        else:
            logging.info(f"Attempted to remove non-monitored channel: {channel_name}")
            await interaction.response.send_message(
                f"‚ùå Channel '{channel_name}' is not being monitored.",
                ephemeral=True
            )

async def setup(bot):
    bot.tree.add_command(twitch)